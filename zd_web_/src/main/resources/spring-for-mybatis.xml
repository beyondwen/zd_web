<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

  <mvc:default-servlet-handler/>
  
  <!-- 注解装配bean -->
  <context:annotation-config></context:annotation-config>
  <!-- 自动扫描 -->
  <context:component-scan base-package="com.cn.dao" />
  <context:component-scan base-package="com.cn.component" /> 
  <context:component-scan base-package="com.cn.Filter" />
  <context:component-scan base-package="com.cn.pojo" />
  <context:component-scan base-package="com.cn.service" />
  <context:component-scan base-package="com.cn.service.Impl" />
  <context:component-scan base-package="com.cn.Redisdao" />
  <context:component-scan base-package="com.cn.type" />
  <context:component-scan base-package="com.cn.Utils" />
   
<aop:config proxy-target-class="true"></aop:config>  
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="oracle.jdbc.OracleDriver"></property>
		<property name="jdbcUrl"
			value="jdbc:oracle:thin:system/19961025aA@127.0.0.1:1521:zhcoder"></property>


		<property name="maxPoolSize" value="20" />
		<property name="minPoolSize" value="5" />
		<property name="acquireIncrement" value="3" />
		<property name="initialPoolSize" value="5"></property>
	</bean>


 	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml"
		p:mapperLocations="classpath:mapper/*.xml" /><!-- configLocation为mybatis属性 
		mapperLocations为所有mapper -->

	<!-- spring与mybatis整合配置，扫描所有dao ,生成与DAO类相同名字的bean（除了首字母小写）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.cn.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />

<!--  Spring 对Oracle 序列支持 序列高速缓冲 -->
<bean id="oracleSequenceMaxValueIncrementer" class="org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer">
 <property name="incrementerName" value=""></property>
 <property name="dataSource" ref="dataSource"></property>
</bean>	
	<!-- 对数据源进行事务管理  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
	<tx:annotation-driven transaction-manager="transactionManager" />
		    
<aop:config>
  <aop:pointcut expression="execution(* com.cn.service.Impl.*.*(..))" id="pointcut"/>
 <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" order="1"/>  
</aop:config> 
    
<tx:advice id="txAdvice" transaction-manager="transactionManager">     
  <tx:attributes>
   <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Execption"></tx:method>
  </tx:attributes>
</tx:advice>  
 


 
 
 
  <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
  </bean>
 
 
   <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.cn.service.Impl.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
</bean>
 
	<!-- 自定义Realm --> 
	<bean id="myRealm" class="com.cn.service.Impl.MyRealm">  
	 <property name="credentialsMatcher" ref="credentialsMatcher"/>  
     <property name="cachingEnabled" value="true"/> 
     <property name="authenticationCachingEnabled" value="true"/>
     <property name="authenticationCacheName" value="authenticationCache"/>
     <property name="authorizationCachingEnabled" value="true"/>
<property name="authorizationCacheName" value="authorizationCache"/>
	</bean>

<!--  -->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">   
        <!--线程安全的访问session-->  
         <property name="synchronizeOnSession" value="true"/>   
         <property name="customArgumentResolvers">  
            <list>  
               <bean class="com.cn.component.RequestJsonParamMethodArgumentResolver"/>  
               <bean class="com.cn.component.FormModelMethodArgumentResolver"/>  
            </list>  
         </property>  
     </bean> 
 <bean id="passwordHelper" class="com.cn.service.Impl.PasswordHelper">
        <property name="algorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
</bean>


	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
  	  <property name="realm" ref="myRealm"/>
  	   <property name="cacheManager" ref="cacheManager"/>  
	</bean> 

 <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
</bean>

   <!-- 基于Form表单的身份验证过滤器 
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/logins.jsp"/>
   </bean>
	-->
	
   <!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 身份认证失败，则跳转到登录页面的配置 -->  
	    <property name="loginUrl" value="/logins.jsp"/>
	    <!-- 权限认证失败，则跳转到指定页面 -->  
	    <property name="unauthorizedUrl" value="/logins.jsp"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	        <property name="filters">
            <map>
         
            </map>
        </property>
	    <property name="filterChainDefinitions">  
	        <value> 
	    
	             /login=anon
				<!--  /file/**=authc-->
				/logout=anon
				/teacher=perms["user:create"]
	        </value>  
	    </property>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
	<!-- 会话ID生成器 -->
<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

  <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
   </bean>
   
   <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
  </bean>

 <!--  会话DAO  启动Ehcache缓存-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器  -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
  </bean>

	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
  	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
    <property name="securityManager" ref="securityManager"/>  
    </bean>


   <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--登录-->
                <prop key="org.apache.shiro.authz.UnauthenticatedException">
                    redirect:/exception
                </prop>
                <!--授权-->
                <prop key="org.apache.shiro.authz.UnauthorizedException">
                    redirect:/exception
                </prop>
                
                <!--授权-->
                <prop key="org.apache.shiro.authz.AuthorizationException">
                    redirect:/exception
                </prop> 
                
            </props>
        </property>
        <property name="defaultErrorView" value="error/genericView"/>
    </bean>

<!--  redisDao -->
<bean id="redisDao" class="com.cn.Redisdao.RedisDao">
 <constructor-arg index="0" value="localhost"></constructor-arg>
  <constructor-arg index="1" value="6379"></constructor-arg>
</bean>




 <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.qq.com"/>
        <property name="protocol" value="smtp" /> 
        <!-- 465 for Gamil -->
        <property name="port" value="465"/>
        <property name="username" value="2922646394@qq.com"/>
        <property name="password" value="zzonpsaestloddje"/> 
       
    </bean>
     
    <!--Asyn send Eamil--> 
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
       <property name="corePoolSize" value="10"/>  
       <property name="maxPoolSize" value="30"/>  
    </bean>
 
    <!-- You can have some pre-configured messagess also which are ready to send   -->
    <bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="to" value="xxx@gmail.com"></property>
        <property name="from" value="xxx@sina.com"></property>
        <property name="subject" value="Test email from sina."/>
    </bean>


</beans>
